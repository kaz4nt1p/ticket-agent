# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
from fastapi import APIRouter, Request
import httpx
import os
from typing import Optional, Tuple, Union
from dotenv import load_dotenv
from src.core.openai_agent import extract_flight_query
from datetime import datetime, timedelta
import re
from src.core.dialog_memory import save_message_to_memory, get_memory
from src.core.conversation_state import get_conversation_state
from src.services.flight_cache import flight_cache
from src.services.price_tracker_db import add_tracked_flights
import json
from src.services.redis_client import redis_client

app = APIRouter()

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
AVIASALES_TOKEN = os.getenv("AVIASALES_TOKEN")

# --- –°–æ—Ö—Ä–∞–Ω—è–µ–º flights –≤ Redis –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
TRACK_FLIGHTS_KEY = "track_flights:{}"

async def search_top_flights(origin: str, destination: str, date: Optional[Union[str, dict]] = None, currency: str = "rub", transfers: str = "any") -> str:
    # --- –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ---
    params_for_cache = {
        "origin": origin,
        "destination": destination,
        "date": date,
        "currency": currency,
        "transfers": transfers
    }
    cached = flight_cache.get(params_for_cache)
    if cached:
        print(f"[CACHE] Found flights in Redis for {params_for_cache}")
        all_flights = cached
    else:
        print(f"[CACHE] No flights in Redis for {params_for_cache}, requesting Aviasales API...")
        url = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"
        headers = {}
        all_flights = []
        date_list = []
        if isinstance(date, dict) and "from" in date and "to" in date:
            date_str = f"{date['from']} - {date['to']}"
        elif isinstance(date, str):
            date_str = date
        else:
            date_str = None
        if date_str and date_str != "any":
            match = re.match(r"(\d{4}-\d{2}-\d{2})\s*-\s*(\d{4}-\d{2}-\d{2})", date_str)
            if match:
                start = datetime.strptime(match.group(1), "%Y-%m-%d")
                end = datetime.strptime(match.group(2), "%Y-%m-%d")
                delta = (end - start).days
                date_list = [(start + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(delta + 1)]
            else:
                date_list = [d.strip() for d in re.split(r",|;| ", date_str) if re.match(r"\d{4}-\d{2}-\d{2}", d.strip())]
                if not date_list and re.match(r"\d{4}-\d{2}", date_str):
                    date_list = [f"{date_str}-{str(day).zfill(2)}" for day in range(1, 32)]
                if not date_list:
                    date_list = [date_str]
        else:
            date_list = [None]
        for d in date_list:
            params = {
                "origin": origin,
                "destination": destination,
                "one_way": "true",
                "currency": currency,
                "token": AVIASALES_TOKEN,
                "limit": 5,
                "sorting": "price"
            }
            if d:
                params["departure_at"] = d
            if transfers == 0 or transfers == "0":
                params["direct"] = "true"
            try:
                async with httpx.AsyncClient() as client:
                    resp = await client.get(url, params=params, headers=headers)
                    data = resp.json()
                    if origin == "MOW" and destination == "NHA":
                        print(f"[DEBUG] Aviasales raw data for {d}: {data.get('data')}")
                    if data.get("success") and data.get("data"):
                        all_flights.extend(data["data"])
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É {d}: {e}")
        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à ---
        if all_flights:
            flight_cache.save(params_for_cache, all_flights)
            print(f"[CACHE] Saved {len(all_flights)} flights for {params_for_cache}")
    if not all_flights:
        return "–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º ---
    original_flights = all_flights.copy()
    if transfers == 0 or transfers == "0":
        all_flights = [f for f in all_flights if f.get("transfers", 0) == 0]
        if not all_flights:
            # –ù–µ—Ç –ø—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤, –Ω–æ –µ—Å—Ç—å —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏
            if original_flights:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏ —Å —è–≤–Ω—ã–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–π—Å—ã –ø–æ –¥–∞—Ç–µ
                seen = set()
                unique_flights = []
                for f in original_flights:
                    key = (f.get("departure_at"), f.get("origin"), f.get("destination"))
                    if key not in seen:
                        seen.add(key)
                        unique_flights.append(f)
                unique_flights.sort(key=lambda x: x.get("price", 999999))
                flights = unique_flights[:5]
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–µ–π—Å–æ–≤ —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏
                result = [f"‚úàÔ∏è –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã {origin} ‚Üí {destination}"]
                result.append("‚ö†Ô∏è –ü—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
                if date:
                    if isinstance(date, dict):
                        date_info = f"{date['from']} - {date['to']}"
                    else:
                        date_info = date
                    result.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_info}")
                
                result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–π—Å
                for idx, flight in enumerate(flights, 1):
                    price = flight.get("price")
                    airline = flight.get("airline", "-")
                    depart = flight.get("departure_at", "-")[:10]
                    origin_airport = flight.get("origin_airport", origin)
                    dest_airport = flight.get("destination_airport", destination)
                    link = flight.get("link", "")
                    transfers_count = flight.get("transfers", 0)
                    formatted_price = f"{price:,}".replace(",", " ")
                    aviasales_url = f"https://www.aviasales.com{link}"
                    flight_card = f"{idx}. {origin} ({origin_airport}) - {destination} ({dest_airport}) –æ—Ç [{formatted_price} {currency.upper()}]({aviasales_url})"
                    flight_card += f"\n- –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {depart} –∏ –¥—Ä—É–≥–∏–µ."
                    flight_card += f"\n- {airline}, {transfers_count} –ø–µ—Ä–µ—Å–∞–¥–∫–∏" if transfers_count != 1 else f"\n- {airline}, 1 –ø–µ—Ä–µ—Å–∞–¥–∫–∞"
                    result.append(flight_card)
                    result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
                
                return "\n".join(result)
            else:
                return "–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–π—Å—ã –ø–æ –¥–∞—Ç–µ
    seen = set()
    unique_flights = []
    for f in all_flights:
        key = (f.get("departure_at"), f.get("origin"), f.get("destination"))
        if key not in seen:
            seen.add(key)
            unique_flights.append(f)
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    unique_flights.sort(key=lambda x: x.get("price", 999999))
    flights = unique_flights[:5]
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = [f"‚úàÔ∏è –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã {origin} ‚Üí {destination}"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
    if date:
        if isinstance(date, dict):
            date_info = f"{date['from']} - {date['to']}"
        else:
            date_info = date
        result.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_info}")
    
    if transfers == 0:
        result.append("üõ´ –¢–∏–ø: –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã")
    
    result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–π—Å
    for idx, flight in enumerate(flights, 1):
        price = flight.get("price")
        airline = flight.get("airline", "-")
        depart = flight.get("departure_at", "-")[:10]
        origin_airport = flight.get("origin_airport", origin)
        dest_airport = flight.get("destination_airport", destination)
        link = flight.get("link", "")
        transfers_count = flight.get("transfers", 0)
        formatted_price = f"{price:,}".replace(",", " ")
        aviasales_url = f"https://www.aviasales.com{link}"
        flight_card = f"{idx}. {origin} ({origin_airport}) - {destination} ({dest_airport}) –æ—Ç [{formatted_price} {currency.upper()}]({aviasales_url})"
        flight_card += f"\n- –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {depart} –∏ –¥—Ä—É–≥–∏–µ."
        flight_card += f"\n- {airline}, {transfers_count} –ø–µ—Ä–µ—Å–∞–¥–∫–∏" if transfers_count != 1 else f"\n- {airline}, 1 –ø–µ—Ä–µ—Å–∞–¥–∫–∞"
        result.append(flight_card)
        result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
    
    return "\n".join(result)

async def get_iata_code(city_name: str) -> Tuple[Optional[str], Optional[str], Optional[str]]:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å IATA-–∫–æ–¥ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Aviasales API. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–¥, –∏–º—è –∏ —Å—Ç—Ä–∞–Ω—É. –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã."""
    url = "https://autocomplete.travelpayouts.com/places2"
    params = {"term": city_name, "locale": "ru", "types[]": "city"}
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(url, params=params)
            data = resp.json()
            print(f"[IATA] Autocomplete response for '{city_name}':", data)
            if data and isinstance(data, list):
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
                for item in data:
                    if item.get("name", "").lower() == city_name.lower():
                        print(f"[IATA] –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {item.get('name')} -> {item.get('code')}")
                        return item.get("code"), item.get("name"), item.get("country_name")
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏—â–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–æ–¥
                if data:
                    first_city = data[0]
                    print(f"[IATA] –ù–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –±–µ—Ä—É –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {first_city.get('name')} ({first_city.get('country_name')}) -> {first_city.get('code')}")
                    return first_city.get("code"), first_city.get("name"), first_city.get("country_name")
                else:
                    print(f"[IATA] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{city_name}'")
    except Exception as e:
        print(f"[IATA ERROR] {e}")
    return None, None, None

# SYSTEM_PROMPT: –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–π flight_cache. –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è null ‚Äî AviasalesSearchTool, –ø–æ—Ç–æ–º flight_cache —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º.

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        print("[WEBHOOK] Incoming data:", data)
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–∫–∏ ---
        if "callback_query" in data:
            callback = data["callback_query"]
            chat_id = callback["message"]["chat"]["id"]
            message_id = callback["message"]["message_id"]
            data_str = callback["data"]
            if data_str == "track_price":
                # –ü–æ–ª—É—á–∞–µ–º flights –∏–∑ Redis
                flights_json = redis_client.get(TRACK_FLIGHTS_KEY.format(chat_id))
                if flights_json:
                    flights = json.loads(flights_json)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º flights –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è SQLite
                    flights_for_db = []
                    for f in flights:
                        flights_for_db.append({
                            "from_city": f.get("origin"),
                            "to_city": f.get("destination"),
                            "date": f.get("departure_at", "")[:10],
                            "flight_number": f.get("flight_number", f.get("airline", "") + f.get("departure_at", "")),
                            "airline": f.get("airline"),
                            "departure_time": f.get("departure_at"),
                            "arrival_time": f.get("return_at", ""),
                            "transfers": f.get("transfers"),
                            "current_price": f.get("price")
                        })
                    add_tracked_flights(chat_id, flights_for_db)
                    await send_message(chat_id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø–æ —ç—Ç–∏–º —Ä–µ–π—Å–∞–º!")
                else:
                    await send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–π—Å—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return {"ok": True}
            return {"ok": True}
        # --- –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
        chat_id = data.get("message", {}).get("chat", {}).get("id")
        text = data.get("message", {}).get("text", "")
        if chat_id and text:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å (–∫–æ–Ω—Ç–µ–∫—Å—Ç)
            save_message_to_memory(chat_id, text, k=10)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conv_state = get_conversation_state(chat_id)
            current_state = conv_state.get_state()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ä–æ–¥–∞)
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ä–æ–¥–∞, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ - —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            if current_state.get("is_complete") and any(city_word in text.lower() for city_word in ["–º–æ—Å–∫–≤–∞", "–±–∞–Ω–∫–æ–∫", "—Ö–æ—à–∏–º–∏–Ω", "—Å–æ—á–∏", "–ø–∞—Ä–∏–∂", "–ª–æ–Ω–¥–æ–Ω", "–Ω—å—é-–π–æ—Ä–∫"]):
                print("[NEW CONVERSATION] Detected new city request, clearing state")
                conv_state.clear_state()
                current_state = conv_state.get_state()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            history = get_memory(chat_id, k=3)
            if not isinstance(history, list):
                history = []
            else:
                history = [msg.decode('utf-8') if isinstance(msg, bytes) else str(msg) for msg in history]
            
            print(f"[CONVERSATION STATE] Current: {current_state}")
            print(f"[HISTORY] {history}")
            
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI-–∞–≥–µ–Ω—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π ---
            parsed = await extract_flight_query(text, history=history)
            origin_city = parsed.get("from")
            dest_city = parsed.get("to")
            date = parsed.get("date")
            transfers = parsed.get("transfers", "any")
            need_clarify = parsed.get("need_clarify", [])
            
            print(f"[PARSED] from: {origin_city}, to: {dest_city}, date: {date}, transfers: {transfers}")
            print(f"[NEED_CLARIFY] {need_clarify}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            new_params = {
                "from": origin_city if origin_city != "any" else None,
                "to": dest_city if dest_city != "any" else None,
                "date": date if date != "any" else None,
                "transfers": transfers
            }
            updated_state = conv_state.update_state(new_params)
            
            print(f"[UPDATED STATE] {updated_state}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            missing_params = conv_state.get_missing_params()
            
            if missing_params:
                clarification_messages = []
                if "from" in missing_params:
                    clarification_messages.append("üìç –û—Ç–∫—É–¥–∞ –≤—ã–ª–µ—Ç–∞–µ—Ç–µ?")
                if "to" in missing_params:
                    clarification_messages.append("üéØ –ö—É–¥–∞ –ª–µ—Ç–∏—Ç–µ?")
                if "date" in missing_params:
                    clarification_messages.append("üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –Ω—É–∂–Ω—ã –±–∏–ª–µ—Ç—ã?")
                
                clarification_text = "\n".join(clarification_messages)
                await send_message(chat_id, f"‚ùì –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n{clarification_text}")
                return {"ok": True}
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—â–µ–º –±–∏–ª–µ—Ç—ã
            origin = None
            origin_name = updated_state["from"]
            origin_country = None
            if not origin:
                origin, origin_name, origin_country = await get_iata_code(updated_state["from"])
            
            destination = None
            dest_name = updated_state["to"]
            dest_country = None
            if not destination:
                destination, dest_name, dest_country = await get_iata_code(updated_state["to"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IATA –∫–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã
            if not origin:
                await send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{updated_state['from']}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
                return {"ok": True}
            
            if not destination:
                await send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{updated_state['to']}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
                return {"ok": True}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
            search_message = f"üîç –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤\n"
            search_message += f"üõ´ {origin_name} ‚Üí {dest_name}"
            
            if updated_state["date"]:
                if isinstance(updated_state["date"], dict):
                    date_info = f"{updated_state['date']['from']} - {updated_state['date']['to']}"
                else:
                    date_info = updated_state["date"]
                search_message += f"\nüìÖ {date_info}"
            
            if updated_state["transfers"] == 0:
                search_message += "\n‚úÖ –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã"
            
            search_message += "\n\n‚è≥ –ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã..."
            
            await send_message(chat_id, search_message)
            
            # --- –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤ ---
            reply = None
            flights = []
            date_param = updated_state["date"] if updated_state["date"] else None
            transfers_param = str(updated_state["transfers"]) if updated_state["transfers"] is not None else "any"
            
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏–º–µ—Ç—å –≤ –≤–∏–¥—É –≤–µ—Å—å –º–µ—Å—è—Ü
            # –ù–∞–ø—Ä–∏–º–µ—Ä, "–≤ –∞–≤–≥—É—Å—Ç–µ" -> "2025-08-01", –Ω–æ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –≤–µ—Å—å –∞–≤–≥—É—Å—Ç
            if date_param and isinstance(date_param, str) and len(date_param) == 10:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞
                if date_param.endswith("-01"):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –º–µ—Å—è—Ü–∞
                    year_month = date_param[:7]  # "2025-08"
                    from datetime import datetime
                    import calendar
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                    dt = datetime.strptime(date_param, "%Y-%m-%d")
                    last_day = calendar.monthrange(dt.year, dt.month)[1]
                    date_param = {
                        "from": date_param,
                        "to": f"{year_month}-{last_day:02d}"
                    }
                    print(f"[DATE RANGE] Converting single date to month range: {date_param}")
            
            if origin and destination:
                flights, reply = await search_top_flights_with_flights(origin, destination, date_param, transfers=transfers_param)
            
            if reply:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–π—Å—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–æ–π
                if flights:
                    redis_client.setex(TRACK_FLIGHTS_KEY.format(chat_id), 3600, json.dumps(flights, ensure_ascii=False))
                    await send_message(chat_id, reply, reply_markup=get_price_track_button())
                else:
                    await send_message(chat_id, reply)  # reply –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
                conv_state.clear_state()
                print("[CONVERSATION CLEARED] State cleared after successful search")
            else:
                await send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            
            return {"ok": True}
        else:
            print("[WEBHOOK] –ù–µ—Ç chat_id –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
    except Exception as e:
        print(f"[WEBHOOK ERROR] {e}")
    return {"ok": True}

async def send_message(chat_id: int, text: str, reply_markup: dict = None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    if reply_markup is not None:
        payload["reply_markup"] = reply_markup
    async with httpx.AsyncClient() as client:
        await client.post(
            TELEGRAM_API_URL,
            json=payload
        )

# --- –ù–æ–≤—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è inline-–∫–Ω–æ–ø–∫–∏ ---
def get_price_track_button():
    return {
        "inline_keyboard": [
            [
                {"text": "–°–æ–æ–±—â–∏—Ç—å –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã üîî", "callback_data": "track_price"}
            ]
        ]
    }

# --- –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º search_top_flights –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞ ---
async def search_top_flights_with_flights(origin: str, destination: str, date: Optional[Union[str, dict]] = None, currency: str = "rub", transfers: str = "any") -> tuple:
    params_for_cache = {
        "origin": origin,
        "destination": destination,
        "date": date,
        "currency": currency,
        "transfers": transfers
    }
    cached = flight_cache.get(params_for_cache)
    if cached:
        print(f"[CACHE] Found flights in Redis for {params_for_cache}")
        all_flights = cached
    else:
        print(f"[CACHE] No flights in Redis for {params_for_cache}, requesting Aviasales API...")
        url = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"
        headers = {}
        all_flights = []
        date_list = []
        if isinstance(date, dict) and "from" in date and "to" in date:
            date_str = f"{date['from']} - {date['to']}"
        elif isinstance(date, str):
            date_str = date
        else:
            date_str = None
        if date_str and date_str != "any":
            match = re.match(r"(\d{4}-\d{2}-\d{2})\s*-\s*(\d{4}-\d{2}-\d{2})", date_str)
            if match:
                start = datetime.strptime(match.group(1), "%Y-%m-%d")
                end = datetime.strptime(match.group(2), "%Y-%m-%d")
                delta = (end - start).days
                date_list = [(start + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(delta + 1)]
            else:
                date_list = [d.strip() for d in re.split(r",|;| ", date_str) if re.match(r"\d{4}-\d{2}-\d{2}", d.strip())]
                if not date_list and re.match(r"\d{4}-\d{2}", date_str):
                    date_list = [f"{date_str}-{str(day).zfill(2)}" for day in range(1, 32)]
                if not date_list:
                    date_list = [date_str]
        else:
            date_list = [None]
        for d in date_list:
            params = {
                "origin": origin,
                "destination": destination,
                "one_way": "true",
                "currency": currency,
                "token": AVIASALES_TOKEN,
                "limit": 5,
                "sorting": "price"
            }
            if d:
                params["departure_at"] = d
            if transfers == 0 or transfers == "0":
                params["direct"] = "true"
            try:
                async with httpx.AsyncClient() as client:
                    resp = await client.get(url, params=params, headers=headers)
                    data = resp.json()
                    if origin == "MOW" and destination == "NHA":
                        print(f"[DEBUG] Aviasales raw data for {d}: {data.get('data')}")
                    if data.get("success") and data.get("data"):
                        all_flights.extend(data["data"])
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É {d}: {e}")
        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à ---
        if all_flights:
            flight_cache.save(params_for_cache, all_flights)
            print(f"[CACHE] Saved {len(all_flights)} flights for {params_for_cache}")
    if not all_flights:
        return [], "–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º ---
    original_flights = all_flights.copy()
    if transfers == 0 or transfers == "0":
        all_flights = [f for f in all_flights if f.get("transfers", 0) == 0]
        if not all_flights:
            if original_flights:
                seen = set()
                unique_flights = []
                for f in original_flights:
                    key = (f.get("departure_at"), f.get("origin"), f.get("destination"))
                    if key not in seen:
                        seen.add(key)
                        unique_flights.append(f)
                unique_flights.sort(key=lambda x: x.get("price", 999999))
                flights = unique_flights[:5]
                result = [f"‚úàÔ∏è –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã {origin} ‚Üí {destination}"]
                result.append("‚ö†Ô∏è –ü—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏")
                if date:
                    if isinstance(date, dict):
                        date_info = f"{date['from']} - {date['to']}"
                    else:
                        date_info = date
                    result.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_info}")
                result.append("")
                for idx, flight in enumerate(flights, 1):
                    price = flight.get("price")
                    airline = flight.get("airline", "-")
                    depart = flight.get("departure_at", "-")[:10]
                    origin_airport = flight.get("origin_airport", origin)
                    dest_airport = flight.get("destination_airport", destination)
                    link = flight.get("link", "")
                    transfers_count = flight.get("transfers", 0)
                    formatted_price = f"{price:,}".replace(",", " ")
                    aviasales_url = f"https://www.aviasales.com{link}"
                    flight_card = f"{idx}. {origin} ({origin_airport}) - {destination} ({dest_airport}) –æ—Ç [{formatted_price} {currency.upper()}]({aviasales_url})"
                    flight_card += f"\n- –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {depart} –∏ –¥—Ä—É–≥–∏–µ."
                    flight_card += f"\n- {airline}, {transfers_count} –ø–µ—Ä–µ—Å–∞–¥–∫–∏" if transfers_count != 1 else f"\n- {airline}, 1 –ø–µ—Ä–µ—Å–∞–¥–∫–∞"
                    result.append(flight_card)
                    result.append("")
                return flights, "\n".join(result)
            else:
                return [], "–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    seen = set()
    unique_flights = []
    for f in all_flights:
        key = (f.get("departure_at"), f.get("origin"), f.get("destination"))
        if key not in seen:
            seen.add(key)
            unique_flights.append(f)
    unique_flights.sort(key=lambda x: x.get("price", 999999))
    flights = unique_flights[:5]
    result = [f"‚úàÔ∏è –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã {origin} ‚Üí {destination}"]
    if date:
        if isinstance(date, dict):
            date_info = f"{date['from']} - {date['to']}"
        else:
            date_info = date
        result.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_info}")
    if transfers == 0:
        result.append("üõ´ –¢–∏–ø: –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã")
    result.append("")
    for idx, flight in enumerate(flights, 1):
        price = flight.get("price")
        airline = flight.get("airline", "-")
        depart = flight.get("departure_at", "-")[:10]
        origin_airport = flight.get("origin_airport", origin)
        dest_airport = flight.get("destination_airport", destination)
        link = flight.get("link", "")
        transfers_count = flight.get("transfers", 0)
        formatted_price = f"{price:,}".replace(",", " ")
        aviasales_url = f"https://www.aviasales.com{link}"
        flight_card = f"{idx}. {origin} ({origin_airport}) - {destination} ({dest_airport}) –æ—Ç [{formatted_price} {currency.upper()}]({aviasales_url})"
        flight_card += f"\n- –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {depart} –∏ –¥—Ä—É–≥–∏–µ."
        flight_card += f"\n- {airline}, {transfers_count} –ø–µ—Ä–µ—Å–∞–¥–∫–∏" if transfers_count != 1 else f"\n- {airline}, 1 –ø–µ—Ä–µ—Å–∞–¥–∫–∞"
        result.append(flight_card)
        result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
    return flights, "\n".join(result)
