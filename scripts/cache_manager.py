#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º Redis
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.flight_cache import flight_cache
from src.services.parse_cache import parse_cache
from src.services.redis_client import redis_client

def show_cache_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–µ–π Redis:")
    print("=" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Ä–µ–π—Å–æ–≤
    flight_stats = flight_cache.get_stats()
    print(f"‚úàÔ∏è  –ö—ç—à —Ä–µ–π—Å–æ–≤:")
    print(f"   –ó–∞–ø–∏—Å–µ–π: {flight_stats.get('total_entries', 0)}")
    print(f"   –†–∞–∑–º–µ—Ä: {flight_stats.get('total_size_bytes', 0)} –±–∞–π—Ç")
    print(f"   TTL: {flight_stats.get('ttl_seconds', 0) // 3600} —á–∞—Å–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    parse_stats = parse_cache.get_stats()
    print(f"üîç –ö—ç—à –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"   –ó–∞–ø–∏—Å–µ–π: {parse_stats.get('total_entries', 0)}")
    print(f"   –†–∞–∑–º–µ—Ä: {parse_stats.get('total_size_bytes', 0)} –±–∞–π—Ç")
    print(f"   TTL: {parse_stats.get('ttl_seconds', 0) // 3600} —á–∞—Å–æ–≤")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis
    try:
        info = redis_client.info()
        print(f"üíæ Redis –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {info.get('used_memory_human', 'N/A')}")
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {info.get('connected_clients', 'N/A')}")
        print(f"   –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {info.get('db0', {}).get('keys', 'N/A')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis: {e}")

def clear_flight_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Ä–µ–π—Å–æ–≤"""
    print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–µ–π—Å–æ–≤...")
    success = flight_cache.clear_all()
    if success:
        print("‚úÖ –ö—ç—à —Ä–µ–π—Å–æ–≤ –æ—á–∏—â–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Ä–µ–π—Å–æ–≤")

def clear_parse_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    success = parse_cache.clear_all()
    if success:
        print("‚úÖ –ö—ç—à –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—á–∏—â–µ–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")

def clear_all_caches():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫—ç—à–∏"""
    print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π...")
    flight_success = flight_cache.clear_all()
    parse_success = parse_cache.clear_all()
    
    if flight_success and parse_success:
        print("‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—ç—à–µ–π")

def show_redis_keys():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –≤ Redis"""
    try:
        print("üîë –ö–ª—é—á–∏ –≤ Redis:")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
        all_keys = redis_client.keys("*")
        
        if not all_keys:
            print("üì≠ Redis –ø—É—Å—Ç")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
        key_groups = {}
        for key in all_keys:
            if isinstance(key, bytes):
                key = key.decode('utf-8')
            
            prefix = key.split(':')[0] if ':' in key else 'other'
            if prefix not in key_groups:
                key_groups[prefix] = []
            key_groups[prefix].append(key)
        
        # –í—ã–≤–æ–¥–∏–º –≥—Ä—É–ø–ø—ã
        for prefix, keys in key_groups.items():
            print(f"üìÅ {prefix}: {len(keys)} –∫–ª—é—á–µ–π")
            for key in keys[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {key}")
            if len(keys) > 5:
                print(f"   ... –∏ –µ—â–µ {len(keys) - 5} –∫–ª—é—á–µ–π")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/cache_manager.py stats     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("  python scripts/cache_manager.py keys      - –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–∏ Redis")
        print("  python scripts/cache_manager.py clear-flight  - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–µ–π—Å–æ–≤")
        print("  python scripts/cache_manager.py clear-parse   - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("  python scripts/cache_manager.py clear-all     - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏")
        return
    
    command = sys.argv[1]
    
    if command == "stats":
        show_cache_stats()
    elif command == "keys":
        show_redis_keys()
    elif command == "clear-flight":
        clear_flight_cache()
    elif command == "clear-parse":
        clear_parse_cache()
    elif command == "clear-all":
        clear_all_caches()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main() 