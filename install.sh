#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ FlyTracker Bot
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
REPO_URL=""
TELEGRAM_TOKEN=""
AVIASALES_TOKEN=""
DOMAIN=""
AUTO_MODE=false

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ FlyTracker Bot"
    echo "=========================================="
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  $0 [–æ–ø—Ü–∏–∏]"
    echo
    echo "–û–ø—Ü–∏–∏:"
    echo "  -r, --repo URL        URL Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    echo "  -t, --telegram TOKEN  Telegram Bot Token"
    echo "  -a, --aviasales TOKEN Aviasales API Token"
    echo "  -d, --domain DOMAIN   –î–æ–º–µ–Ω –∏–ª–∏ IP —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  --auto                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤)"
    echo "  -h, --help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  # –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "  $0 -r https://github.com/user/flytracker-bot.git \\"
    echo "     -t 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz \\"
    echo "     -a your_aviasales_token \\"
    echo "     -d flytracker.duckdns.org --auto"
    echo
    echo "  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "  $0 -r https://github.com/user/flytracker-bot.git"
    echo
    echo "  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å IP –∞–¥—Ä–µ—Å–æ–º"
    echo "  $0 -r https://github.com/user/flytracker-bot.git \\"
    echo "     -t 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz \\"
    echo "     -a your_aviasales_token \\"
    echo "     -d 123.456.789.123 --auto"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -r|--repo)
                REPO_URL="$2"
                shift 2
                ;;
            -t|--telegram)
                TELEGRAM_TOKEN="$2"
                shift 2
                ;;
            -a|--aviasales)
                AVIASALES_TOKEN="$2"
                shift 2
                ;;
            -d|--domain)
                DOMAIN="$2"
                shift 2
                ;;
            --auto)
                AUTO_MODE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        exit 1
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
detect_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–°"
        exit 1
    fi
    log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS $VER"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    if command -v docker &> /dev/null; then
        log_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    case $OS in
        *"Ubuntu"*|*"Debian"*)
            sudo apt update
            sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        *"CentOS"*|*"Red Hat"*)
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            ;;
        *)
            log_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OS"
            exit 1
            ;;
    esac
    
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -aG docker $USER
    
    log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git
install_git() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git..."
    
    if command -v git &> /dev/null; then
        log_success "Git —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    case $OS in
        *"Ubuntu"*|*"Debian"*)
            sudo apt install -y git
            ;;
        *"CentOS"*|*"Red Hat"*)
            sudo yum install -y git
            ;;
    esac
    
    log_success "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
clone_project() {
    log_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    if [ -z "$REPO_URL" ]; then
        if [ "$AUTO_MODE" = true ]; then
            log_error "URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -r –∏–ª–∏ --repo"
            exit 1
        fi
        
        log_info "–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
        read -p "URL: " REPO_URL
    fi
    
    if [ -d "fastapi-template" ]; then
        log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è fastapi-template —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        if [ "$AUTO_MODE" = true ]; then
            rm -rf fastapi-template
            log_info "–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞"
        else
            read -p "–£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                rm -rf fastapi-template
            else
                log_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞"
                exit 1
            fi
        fi
    fi
    
    git clone $REPO_URL fastapi-template
    cd fastapi-template
    
    log_success "–ü—Ä–æ–µ–∫—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_env() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ -f ".env" ]; then
        log_warning "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        if [ "$AUTO_MODE" = true ]; then
            rm .env
            log_info "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω"
        else
            read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log_info "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ .env"
                return
            fi
        fi
    fi
    
    cp env.example .env
    
    # Telegram Bot Token
    if [ -z "$TELEGRAM_TOKEN" ]; then
        if [ "$AUTO_MODE" = true ]; then
            log_error "Telegram —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -t –∏–ª–∏ --telegram"
            exit 1
        fi
        read -p "Telegram Bot Token (–æ—Ç @BotFather): " TELEGRAM_TOKEN
    fi
    sed -i "s/your_telegram_bot_token_here/$TELEGRAM_TOKEN/" .env
    
    # Aviasales Token
    if [ -z "$AVIASALES_TOKEN" ]; then
        if [ "$AUTO_MODE" = true ]; then
            log_error "Aviasales —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -a –∏–ª–∏ --aviasales"
            exit 1
        fi
        read -p "Aviasales API Token (–æ—Ç travelpayouts.com): " AVIASALES_TOKEN
    fi
    sed -i "s/your_aviasales_token_here/$AVIASALES_TOKEN/" .env
    
    # Domain
    if [ -z "$DOMAIN" ]; then
        if [ "$AUTO_MODE" = true ]; then
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å
            DOMAIN=$(curl -s ifconfig.me)
            log_info "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω IP –∞–¥—Ä–µ—Å: $DOMAIN"
        else
            read -p "–î–æ–º–µ–Ω –∏–ª–∏ IP —Å–µ—Ä–≤–µ—Ä–∞: " DOMAIN
        fi
    fi
    sed -i "s/your-domain.com/$DOMAIN/" .env
    
    log_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs/nginx
    mkdir -p data
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
start_application() {
    log_info "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    chmod +x docker-start.sh
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    ./docker-start.sh
    
    log_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
setup_webhook() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook..."
    
    # –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
    TELEGRAM_TOKEN=$(grep TELEGRAM_TOKEN .env | cut -d '=' -f2)
    DOMAIN=$(grep DOMAIN .env | cut -d '=' -f2)
    
    if [ -z "$TELEGRAM_TOKEN" ] || [ -z "$DOMAIN" ]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –¥–æ–º–µ–Ω –∏–∑ .env"
        return
    fi
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    sleep 15
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    WEBHOOK_URL="http://$DOMAIN/tg/webhook"
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: $WEBHOOK_URL"
    
    response=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/setWebhook" \
         -H "Content-Type: application/json" \
         -d "{\"url\": \"$WEBHOOK_URL\"}")
    
    if echo "$response" | grep -q '"ok":true'; then
        log_success "Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: $response"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
verify_installation() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if docker-compose ps | grep -q "Up"; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
    else
        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
    if curl -f http://localhost/health >/dev/null 2>&1; then
        log_success "Health check –ø—Ä–æ—à–µ–ª"
    else
        log_error "Health check –Ω–µ –ø—Ä–æ—à–µ–ª"
        return 1
    fi
    
    log_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_info() {
    echo
    log_success "üéâ FlyTracker Bot —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:"
    echo "   üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost"
    echo "   üè• Health check: http://localhost/health"
    echo "   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo "   üîó Webhook: http://$DOMAIN/tg/webhook"
    echo
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   docker-compose ps                    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "   docker-compose logs -f app           # –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "   docker-compose restart app           # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "   docker-compose down                  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "   ./docker-start.sh                    # –ó–∞–ø—É—Å–∫"
    echo
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   nano .env                           # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    echo "   docker-compose up -d                # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ"
    echo "   docker-compose down                 # –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo
    echo "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:"
    echo "   docker-compose logs -f app          # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "   curl http://localhost/health        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ FlyTracker Bot"
    echo "=========================================="
    echo
    
    parse_args "$@"
    check_root
    detect_os
    install_docker
    install_git
    clone_project
    setup_env
    create_directories
    start_application
    setup_webhook
    verify_installation
    show_info
}

# –ó–∞–ø—É—Å–∫
main "$@" 